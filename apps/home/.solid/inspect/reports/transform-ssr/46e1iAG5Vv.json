{
  "resolvedId": "/Users/thom/Sites/th-m/th-m.codes.mono/packages/home/src/routes/apps/index.tsx",
  "transforms": [
    {
      "name": "__load__",
      "result": "import { createEffect, createSignal, onMount } from \"solid-js\";\nimport { createServerAction$ } from \"solid-start/server\";\n\nimport { getConsumerToken } from \"~/models/kolla.server\";\nimport { fetchUser } from \"~/models/users.client\";\nexport interface Kolla {\n  initialized: boolean;\n  authenticated: boolean;\n  isVisible: boolean;\n  consumerToken: string;\n\n  init: () => void;\n  authenticate: (token: any) => Promise<void>;\n  openMarketplace: () => Promise<void>;\n  closeMarketplace: () => Promise<void>;\n  // subscribe: <EventName extends keyof EventMap>(\n  //   eventName: EventName,\n  //   handler: EventMap[EventName],\n  // ) => () => void;\n  openConnector: (connectorID: string) => void;\n  // getConnectorLinkedAccounts: (connectorID: string) => Promise<ConsumerDetails>;\n  // getConnectors: () => ConnectorApp[];\n  // getConsumer: () => ConsumerDetails;\n  // asyncGetConsumer: () => Promise<ConsumerDetails>;\n  // asyncGetConnectors: () => Promise<Connector[]>;\n  getWidgetContainer: () => HTMLDivElement | undefined;\n  getWidgetIframe: () => HTMLIFrameElement | undefined;\n  _registerRenderHook: (id: string, hook: () => void) => void;\n}\n\ndeclare global {\n  interface Window {\n    kolla: Kolla;\n  }\n}\n\nexport default function ThirdParty() {\n  const [user, setUser] = createSignal<{ email: string; id: string } | null>(\n    null\n  );\n  const [token, setToken] = createSignal(\"\");\n  const [initialized, setInitialized] = createSignal(false);\n  const [tokenResponse, getConsumerTokenAct] = createServerAction$(\n    async (form: FormData, { request }) => {\n      const id = form.get(\"id\") as string;\n      const email = (form?.get(\"email\") ?? \"\") as string;\n      if (!id) return;\n      const tokenData = await getConsumerToken({\n        consumer_id: id,\n        metadata: { email: email },\n      });\n      return tokenData\n    }\n  );\n\n  onMount(() => {\n    const timer = setInterval(() => {\n      if (window && window.kolla && window.kolla.initialized) {\n        setInitialized(true);\n        clearInterval(timer);\n      }\n    }, 100);\n  });\n\n  createEffect(async () => {\n    const data = await fetchUser();\n    setUser(data);\n  });\n\n  createEffect(async () => {\n    const userData = user();\n    const isInitialized = initialized();\n    if (!userData || !isInitialized) return;\n    const formData = new FormData();\n    formData.append(\"id\", userData.id);\n    formData.append(\"email\", userData.email);\n\n    getConsumerTokenAct(formData);\n  });\n  \n  createEffect(async () => {\n    if(!tokenResponse.result) return;\n    setToken(tokenResponse.result.token);\n  });\n\n  createEffect(async () => {\n    const consumerToken = token();\n    if (!consumerToken) return;\n    if(!window?.kolla) return;\n    window.kolla.authenticate(consumerToken);\n    window.kolla.openMarketplace();\n  });\n\n  return (\n    <main class=\"text-center mx-auto text-gray-700 p-4\">\n      <h1 class=\"max-6-xs text-6xl text-sky-700 font-thin uppercase my-16\">\n        Apps\n      </h1>\n      <script src=\"https://cdn.getkolla.com/sdk/v2/index.js\" defer></script>\n    </main>\n  );\n}\n",
      "start": 1684878594200,
      "end": 1684878594200
    },
    {
      "name": "solid-start-file-system-router",
      "result": "import { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<main\", \" class=\\\"text-center mx-auto text-gray-700 p-4\\\"><h1 class=\\\"max-6-xs text-6xl text-sky-700 font-thin uppercase my-16\\\">Apps</h1><script src=\\\"https://cdn.getkolla.com/sdk/v2/index.js\\\" defer></script></main>\"];\nimport \"solid-start/data\";\nimport { createRouteAction } from \"solid-start/data\";\nimport server$ from \"solid-start/server\";\nimport { createEffect, createSignal, onMount } from \"solid-js\";\nimport \"solid-start/server\";\nimport { getConsumerToken } from \"~/models/kolla.server\";\nimport { fetchUser } from \"~/models/users.client\";\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(form, {\n  request\n}) {\n  const $$ctx = this;\n  const id = form.get(\"id\");\n  const email = form?.get(\"email\") ?? \"\";\n  if (!id) return;\n  const tokenData = await getConsumerToken({\n    consumer_id: id,\n    metadata: {\n      email: email\n    }\n  });\n  return tokenData;\n}, \"/_m/src/routes/apps/index.tsx/0/tokenResponse\", true);\nserver$.registerHandler(\"/_m/src/routes/apps/index.tsx/0/tokenResponse\", $$server_module0);\nexport default function ThirdParty() {\n  const [user, setUser] = createSignal(null);\n  const [token, setToken] = createSignal(\"\");\n  const [initialized, setInitialized] = createSignal(false);\n  const [tokenResponse, getConsumerTokenAct] = createRouteAction($$server_module0);\n  onMount(() => {\n    const timer = setInterval(() => {\n      if (window && window.kolla && window.kolla.initialized) {\n        setInitialized(true);\n        clearInterval(timer);\n      }\n    }, 100);\n  });\n  createEffect(async () => {\n    const data = await fetchUser();\n    setUser(data);\n  });\n  createEffect(async () => {\n    const userData = user();\n    const isInitialized = initialized();\n    if (!userData || !isInitialized) return;\n    const formData = new FormData();\n    formData.append(\"id\", userData.id);\n    formData.append(\"email\", userData.email);\n    getConsumerTokenAct(formData);\n  });\n  createEffect(async () => {\n    if (!tokenResponse.result) return;\n    setToken(tokenResponse.result.token);\n  });\n  createEffect(async () => {\n    const consumerToken = token();\n    if (!consumerToken) return;\n    if (!window?.kolla) return;\n    window.kolla.authenticate(consumerToken);\n    window.kolla.openMarketplace();\n  });\n  return _$ssr(_tmpl$, _$ssrHydrationKey());\n}",
      "start": 1684878594200,
      "end": 1684878594210,
      "order": "pre"
    },
    {
      "name": "solid",
      "result": "import { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<main\", \" class=\\\"text-center mx-auto text-gray-700 p-4\\\"><h1 class=\\\"max-6-xs text-6xl text-sky-700 font-thin uppercase my-16\\\">Apps</h1><script src=\\\"https://cdn.getkolla.com/sdk/v2/index.js\\\" defer></script></main>\"];\nimport \"solid-start/data\";\nimport { createRouteAction } from \"solid-start/data\";\nimport server$ from \"solid-start/server\";\nimport { createEffect, createSignal, onMount } from \"solid-js\";\nimport \"solid-start/server\";\nimport { getConsumerToken } from \"~/models/kolla.server\";\nimport { fetchUser } from \"~/models/users.client\";\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(form, {\n  request\n}) {\n  const $$ctx = this;\n  const id = form.get(\"id\");\n  const email = form?.get(\"email\") ?? \"\";\n  if (!id) return;\n  const tokenData = await getConsumerToken({\n    consumer_id: id,\n    metadata: {\n      email: email\n    }\n  });\n  return tokenData;\n}, \"/_m/src/routes/apps/index.tsx/0/tokenResponse\", true);\nserver$.registerHandler(\"/_m/src/routes/apps/index.tsx/0/tokenResponse\", $$server_module0);\nexport default function ThirdParty() {\n  const [user, setUser] = createSignal(null);\n  const [token, setToken] = createSignal(\"\");\n  const [initialized, setInitialized] = createSignal(false);\n  const [tokenResponse, getConsumerTokenAct] = createRouteAction($$server_module0);\n  onMount(() => {\n    const timer = setInterval(() => {\n      if (window && window.kolla && window.kolla.initialized) {\n        setInitialized(true);\n        clearInterval(timer);\n      }\n    }, 100);\n  });\n  createEffect(async () => {\n    const data = await fetchUser();\n    setUser(data);\n  });\n  createEffect(async () => {\n    const userData = user();\n    const isInitialized = initialized();\n    if (!userData || !isInitialized) return;\n    const formData = new FormData();\n    formData.append(\"id\", userData.id);\n    formData.append(\"email\", userData.email);\n    getConsumerTokenAct(formData);\n  });\n  createEffect(async () => {\n    if (!tokenResponse.result) return;\n    setToken(tokenResponse.result.token);\n  });\n  createEffect(async () => {\n    const consumerToken = token();\n    if (!consumerToken) return;\n    if (!window?.kolla) return;\n    window.kolla.authenticate(consumerToken);\n    window.kolla.openMarketplace();\n  });\n  return _$ssr(_tmpl$, _$ssrHydrationKey());\n}",
      "start": 1684878594210,
      "end": 1684878594215,
      "order": "pre"
    },
    {
      "name": "vite:define",
      "result": "import { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<main\", \" class=\\\"text-center mx-auto text-gray-700 p-4\\\"><h1 class=\\\"max-6-xs text-6xl text-sky-700 font-thin uppercase my-16\\\">Apps</h1><script src=\\\"https://cdn.getkolla.com/sdk/v2/index.js\\\" defer></script></main>\"];\nimport \"solid-start/data\";\nimport { createRouteAction } from \"solid-start/data\";\nimport server$ from \"solid-start/server\";\nimport { createEffect, createSignal, onMount } from \"solid-js\";\nimport \"solid-start/server\";\nimport { getConsumerToken } from \"~/models/kolla.server\";\nimport { fetchUser } from \"~/models/users.client\";\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(form, {\n  request\n}) {\n  const $$ctx = this;\n  const id = form.get(\"id\");\n  const email = form?.get(\"email\") ?? \"\";\n  if (!id) return;\n  const tokenData = await getConsumerToken({\n    consumer_id: id,\n    metadata: {\n      email: email\n    }\n  });\n  return tokenData;\n}, \"/_m/src/routes/apps/index.tsx/0/tokenResponse\", true);\nserver$.registerHandler(\"/_m/src/routes/apps/index.tsx/0/tokenResponse\", $$server_module0);\nexport default function ThirdParty() {\n  const [user, setUser] = createSignal(null);\n  const [token, setToken] = createSignal(\"\");\n  const [initialized, setInitialized] = createSignal(false);\n  const [tokenResponse, getConsumerTokenAct] = createRouteAction($$server_module0);\n  onMount(() => {\n    const timer = setInterval(() => {\n      if (window && window.kolla && window.kolla.initialized) {\n        setInitialized(true);\n        clearInterval(timer);\n      }\n    }, 100);\n  });\n  createEffect(async () => {\n    const data = await fetchUser();\n    setUser(data);\n  });\n  createEffect(async () => {\n    const userData = user();\n    const isInitialized = initialized();\n    if (!userData || !isInitialized) return;\n    const formData = new FormData();\n    formData.append(\"id\", userData.id);\n    formData.append(\"email\", userData.email);\n    getConsumerTokenAct(formData);\n  });\n  createEffect(async () => {\n    if (!tokenResponse.result) return;\n    setToken(tokenResponse.result.token);\n  });\n  createEffect(async () => {\n    const consumerToken = token();\n    if (!consumerToken) return;\n    if (!window?.kolla) return;\n    window.kolla.authenticate(consumerToken);\n    window.kolla.openMarketplace();\n  });\n  return _$ssr(_tmpl$, _$ssrHydrationKey());\n}",
      "start": 1684878594215,
      "end": 1684878594215,
      "order": "normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<main\", \" class=\\\"text-center mx-auto text-gray-700 p-4\\\"><h1 class=\\\"max-6-xs text-6xl text-sky-700 font-thin uppercase my-16\\\">Apps</h1><script src=\\\"https://cdn.getkolla.com/sdk/v2/index.js\\\" defer></script></main>\"];\nimport \"/@fs/Users/thom/Sites/th-m/th-m.codes.mono/node_modules/solid-start/data/index.ts\";\nimport { createRouteAction } from \"/@fs/Users/thom/Sites/th-m/th-m.codes.mono/node_modules/solid-start/data/index.ts\";\nimport server$ from \"/@fs/Users/thom/Sites/th-m/th-m.codes.mono/node_modules/solid-start/server/server.ts\";\nimport { createEffect, createSignal, onMount } from \"solid-js\";\nimport \"/@fs/Users/thom/Sites/th-m/th-m.codes.mono/node_modules/solid-start/server/server.ts\";\nimport { getConsumerToken } from \"/src/models/kolla.server.ts\";\nimport { fetchUser } from \"/src/models/users.client.ts\";\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(form, {\n  request\n}) {\n  const $$ctx = this;\n  const id = form.get(\"id\");\n  const email = form?.get(\"email\") ?? \"\";\n  if (!id) return;\n  const tokenData = await getConsumerToken({\n    consumer_id: id,\n    metadata: {\n      email: email\n    }\n  });\n  return tokenData;\n}, \"/_m/src/routes/apps/index.tsx/0/tokenResponse\", true);\nserver$.registerHandler(\"/_m/src/routes/apps/index.tsx/0/tokenResponse\", $$server_module0);\nexport default function ThirdParty() {\n  const [user, setUser] = createSignal(null);\n  const [token, setToken] = createSignal(\"\");\n  const [initialized, setInitialized] = createSignal(false);\n  const [tokenResponse, getConsumerTokenAct] = createRouteAction($$server_module0);\n  onMount(() => {\n    const timer = setInterval(() => {\n      if (window && window.kolla && window.kolla.initialized) {\n        setInitialized(true);\n        clearInterval(timer);\n      }\n    }, 100);\n  });\n  createEffect(async () => {\n    const data = await fetchUser();\n    setUser(data);\n  });\n  createEffect(async () => {\n    const userData = user();\n    const isInitialized = initialized();\n    if (!userData || !isInitialized) return;\n    const formData = new FormData();\n    formData.append(\"id\", userData.id);\n    formData.append(\"email\", userData.email);\n    getConsumerTokenAct(formData);\n  });\n  createEffect(async () => {\n    if (!tokenResponse.result) return;\n    setToken(tokenResponse.result.token);\n  });\n  createEffect(async () => {\n    const consumerToken = token();\n    if (!consumerToken) return;\n    if (!window?.kolla) return;\n    window.kolla.authenticate(consumerToken);\n    window.kolla.openMarketplace();\n  });\n  return _$ssr(_tmpl$, _$ssrHydrationKey());\n}",
      "start": 1684878594215,
      "end": 1684878594217,
      "order": "normal"
    }
  ]
}
