{
  "resolvedId": "/Users/thom/Sites/th-m/th-m.codes.mono/apps/home/src/models/session.server.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\nimport { createCookieSessionStorage } from \"solid-start\";\nimport invariant from \"tiny-invariant\";\nimport { getProfileById, supabase } from \"./users.server\";\nimport { redirect } from \"solid-start/server\";\nimport { Session } from \"@supabase/supabase-js\";\ninvariant(\n    process.env.SESSION_SECRET,\n    \"SESSION_SECRET must be set in your environment variables.\"\n  );\n\n  export const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    secure: process.env.NODE_ENV === \"production\",\n    secrets: [process.env.SESSION_SECRET],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30, // 30 days\n    httpOnly: true\n  }\n});\n\n\nconst USER_SESSION_KEY = \"userId\";\nexport const USER_SESSION_REFRESH_KEY = \"userId_refresh\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getUserId(request: Request) {\n  const session = await getSession(request);\n  const access_token = session.get(USER_SESSION_KEY);\n  const refresh_token = session.get(USER_SESSION_REFRESH_KEY);\n  const supaSession = await supabase.auth.setSession({access_token, refresh_token});\n  const userId = supaSession.data.user?.id\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n  const user = await getProfileById(userId);\n  if (user) return user;\n  throw await logout(request);\n}\n\n/**\n * Require a user session to get to a page. If none is found\n * redirect them to the login page. After login, take them to\n * the original page they wanted to get to.\n */\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n\n  return userId;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n  if (userId == undefined) return null;\n\n  const profile = await getProfileById(userId);\n  if (profile) return profile;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  session,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  session: Session;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  // const session = await getSession(request);\n  const cookieSession = await getSession(request);\n  cookieSession.set(USER_SESSION_KEY, session.access_token);\n  cookieSession.set(USER_SESSION_REFRESH_KEY, session.refresh_token);\n  // const { supabaseClient } = await getClientAndUser(request);\n  // supabaseClient.auth.setSession(session);\n  \n  // session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(cookieSession, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}",
      "start": 1685057954345,
      "end": 1685057954437
    },
    {
      "name": "solid-start-file-system-router",
      "result": "import { createCookieSessionStorage } from \"solid-start\";\nimport invariant from \"tiny-invariant\";\nimport { getProfileById, supabase } from \"./users.server\";\nimport { redirect } from \"solid-start/server\";\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set in your environment variables.\");\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    secure: process.env.NODE_ENV === \"production\",\n    secrets: [process.env.SESSION_SECRET],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    // 30 days\n    httpOnly: true\n  }\n});\nconst USER_SESSION_KEY = \"userId\";\nexport const USER_SESSION_REFRESH_KEY = \"userId_refresh\";\nexport async function getSession(request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\nexport async function getUserId(request) {\n  const session = await getSession(request);\n  const access_token = session.get(USER_SESSION_KEY);\n  const refresh_token = session.get(USER_SESSION_REFRESH_KEY);\n  const supaSession = await supabase.auth.setSession({\n    access_token,\n    refresh_token\n  });\n  const userId = supaSession.data.user?.id;\n  return userId;\n}\nexport async function getUser(request) {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n  const user = await getProfileById(userId);\n  if (user) return user;\n  throw await logout(request);\n}\n\n/**\n * Require a user session to get to a page. If none is found\n * redirect them to the login page. After login, take them to\n * the original page they wanted to get to.\n */\nexport async function requireUserId(request, redirectTo = new URL(request.url).pathname) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\nexport async function requireUser(request) {\n  const userId = await requireUserId(request);\n  if (userId == undefined) return null;\n  const profile = await getProfileById(userId);\n  if (profile) return profile;\n  throw await logout(request);\n}\nexport async function createUserSession({\n  request,\n  session,\n  remember,\n  redirectTo\n}) {\n  // const session = await getSession(request);\n  const cookieSession = await getSession(request);\n  cookieSession.set(USER_SESSION_KEY, session.access_token);\n  cookieSession.set(USER_SESSION_REFRESH_KEY, session.refresh_token);\n  // const { supabaseClient } = await getClientAndUser(request);\n  // supabaseClient.auth.setSession(session);\n\n  // session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(cookieSession, {\n        maxAge: remember ? 60 * 60 * 24 * 7 // 7 days\n        : undefined\n      })\n    }\n  });\n}\nexport async function logout(request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session)\n    }\n  });\n}",
      "start": 1685057954437,
      "end": 1685057954441,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { createCookieSessionStorage } from \"solid-start\";\nimport invariant from \"tiny-invariant\";\nimport { getProfileById, supabase } from \"./users.server\";\nimport { redirect } from \"solid-start/server\";\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set in your environment variables.\");\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    secure: process.env.NODE_ENV === \"production\",\n    secrets: [process.env.SESSION_SECRET],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true\n  }\n});\nconst USER_SESSION_KEY = \"userId\";\nexport const USER_SESSION_REFRESH_KEY = \"userId_refresh\";\nexport async function getSession(request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\nexport async function getUserId(request) {\n  const session = await getSession(request);\n  const access_token = session.get(USER_SESSION_KEY);\n  const refresh_token = session.get(USER_SESSION_REFRESH_KEY);\n  const supaSession = await supabase.auth.setSession({\n    access_token,\n    refresh_token\n  });\n  const userId = supaSession.data.user?.id;\n  return userId;\n}\nexport async function getUser(request) {\n  const userId = await getUserId(request);\n  if (userId === void 0)\n    return null;\n  const user = await getProfileById(userId);\n  if (user)\n    return user;\n  throw await logout(request);\n}\nexport async function requireUserId(request, redirectTo = new URL(request.url).pathname) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\nexport async function requireUser(request) {\n  const userId = await requireUserId(request);\n  if (userId == void 0)\n    return null;\n  const profile = await getProfileById(userId);\n  if (profile)\n    return profile;\n  throw await logout(request);\n}\nexport async function createUserSession({\n  request,\n  session,\n  remember,\n  redirectTo\n}) {\n  const cookieSession = await getSession(request);\n  cookieSession.set(USER_SESSION_KEY, session.access_token);\n  cookieSession.set(USER_SESSION_REFRESH_KEY, session.refresh_token);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(cookieSession, {\n        maxAge: remember ? 60 * 60 * 24 * 7 : void 0\n      })\n    }\n  });\n}\nexport async function logout(request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session)\n    }\n  });\n}\n",
      "start": 1685057954441,
      "end": 1685057954464,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { createCookieSessionStorage } from \"solid-start\";\nimport invariant from \"tiny-invariant\";\nimport { getProfileById, supabase } from \"./users.server\";\nimport { redirect } from \"solid-start/server\";\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set in your environment variables.\");\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    secure: \"production\" === \"production\",\n    secrets: [process.env.SESSION_SECRET],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true\n  }\n});\nconst USER_SESSION_KEY = \"userId\";\nexport const USER_SESSION_REFRESH_KEY = \"userId_refresh\";\nexport async function getSession(request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\nexport async function getUserId(request) {\n  const session = await getSession(request);\n  const access_token = session.get(USER_SESSION_KEY);\n  const refresh_token = session.get(USER_SESSION_REFRESH_KEY);\n  const supaSession = await supabase.auth.setSession({\n    access_token,\n    refresh_token\n  });\n  const userId = supaSession.data.user?.id;\n  return userId;\n}\nexport async function getUser(request) {\n  const userId = await getUserId(request);\n  if (userId === void 0)\n    return null;\n  const user = await getProfileById(userId);\n  if (user)\n    return user;\n  throw await logout(request);\n}\nexport async function requireUserId(request, redirectTo = new URL(request.url).pathname) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\nexport async function requireUser(request) {\n  const userId = await requireUserId(request);\n  if (userId == void 0)\n    return null;\n  const profile = await getProfileById(userId);\n  if (profile)\n    return profile;\n  throw await logout(request);\n}\nexport async function createUserSession({\n  request,\n  session,\n  remember,\n  redirectTo\n}) {\n  const cookieSession = await getSession(request);\n  cookieSession.set(USER_SESSION_KEY, session.access_token);\n  cookieSession.set(USER_SESSION_REFRESH_KEY, session.refresh_token);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(cookieSession, {\n        maxAge: remember ? 60 * 60 * 24 * 7 : void 0\n      })\n    }\n  });\n}\nexport async function logout(request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session)\n    }\n  });\n}\n",
      "start": 1685057954464,
      "end": 1685057954464,
      "order": "normal"
    }
  ]
}
